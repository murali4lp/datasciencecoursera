?predict
predict(k, interval = ("confidence"))
g<- predict(k, interval = ("confidence"))
v <- cbind(wt, g)
v
xvals <- seq(min(wt), max(wt), by=.01)
mod <- lm(mpg~x)
mod <- lm(mpg~wt)
nd <- data.frame(x=xvals)
p1 <- predict(mod, nd, interval=("confidence"))
p1
k <- cbind(xvals,p1)
k
p2 <- predict(mod, nd, interval=("prediction"))
p2
j <- cbind(wt, p2)
j
mod <- lm(mpg~wt)
mod
p1 <- predict(mod)
p1
f1 <- sum((mpg-p1)^2)
f2 <- sum((mpg-p1)*wt)^2)
f2 <- sum(((mpg-p1)*wt)^2)
f1 <- (mpg-p1)^2
f2 <- ((mpg-p1)*wt)^2
h1 <- sum(f1)
h2 <- sum(f2)
fit <- lm(mpg~wt)
summary(fit)$coefficient
attach(mtcars)
fit <- lm(mpg~wt)
summary(fit)$coefficient
attach(mtcars)
fit <- lm(mpg~wt)
summary(fit)$coefficient
sumcoef <- summary(fit)$coefficient
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
sumcoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumcoef[2, 2]
?resid
fit <- lm(mpg~wt)
p1 <- predict(fit)
e <- mpg - p1
res <- sum(e)
res <- sum(e^2)
r2 <- sum((e^2*wt))
r2/res
res/r2
r3 <- mpg -mean(mpg)
r4 <- r3 ^2
r4 <- sum(r3 ^2)
res/r4
clear
clr
clrscr
?t.test
k<- t.test(x=c(140,138,150,148,135), y=c(132,135,151,146,130), alternative = "two.sided", paired=true)
k<- t.test(x=c(140,138,150,148,135), y=c(132,135,151,146,130), alternative = "two.sided", paired=TRUE)
k
j<- t.test(x=c(140,138,150,148,135), y=c(132,135,151,146,130), alternative = "two.sided", paired=TRUE)
?t.exact
?exact.test
?exact
?fisher.test
?t.power.test
?t.test.power
power.t.test(power = 0.9, delta = 1, sd = 4, type = "one.sample", alt = "one.sided")$n
?power.t.test
power.t.test(n = 100, delta = 1, sd = 4, type = "one.sample", alt = "one.sided")$power
?pt
?t.test
?ppois
ppois(9, 17.87, lower.tail = FALSE)
ppois(10, 17.87, lower.tail = FALSE)
ppois(10, 17.87, lower.tail = TRUE)
x <- c("coke", "pepsi")
y <- c(3,1)
table(x,y)
?fisher.test
m <- matrix(c(3,1,1,3), nrow =2)
m
rowname(m) <- x
rownames(m) <- x
rownames(m) <- c("preferred", "non-preferred")
m
colnames <- x
m
colnames < - c("coke", "pepsi")
colnames <- c("coke", "pepsi")
m
fisher.test (x=m, alternative = "greater")
fisher.test (x=m, alternative = "less")
?t.test
n1 <- 9
n2 <- 9
sp <- sqrt( ((n1 - 1) * 1.5^2 + (n2-1) * 1.8^2) / (n1 + n2-2))
md <- -4
semd <- sp * sqrt(1 / n1 + 1/n2)
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd
t.test(mu=md paired = FALSE, var.equal = TRUE)
t.test(mu=md, paired = FALSE, var.equal = TRUE)
?pt
?rnorm
g1 _ rnorm(n=9, mean= -3, sd =1.5)
g1 <- rnorm(n=9, mean= -3, sd =1.5)
g2 <- rnorm(n=9, mean= 1, sd =1.8)
t.test(g1, g2, paired = FALSE, var.equal = TRUE)
?t.test
t.test(g1, g2, paired = FALSE, var.equal = TRUE, alternative = "two.sided")
m
?fisher.test
fisher.test (x=m, alternative = "less", conf.level = 0.95)
fisher.test (x=m, alternative = "more", conf.level = 0.95)
fisher.test (x=m, alternative = "greater", conf.level = 0.95)
fisher.test (x=m, alternative = "less", conf.level = 0.95)
fisher.test (x=m, alternative = "greater", conf.level = 0.95)
fisher.test (x=m, alternative = "greater", conf.level = 0.95, simulate.p.value = TRUE, B = 1e5)
fisher.test (x=m, alternative = "less", conf.level = 0.95)
?t,test
?t.test
t.test(x, y = NULL,
alternative = "two.sided",
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95
head(mtcars)
?mtcars
?fisher.test
f<-fisher.test(x=c("coke", "pepsi"), y = c("pref", "Non-Pref"))
f
m <- c(3,1,1,3)
dim(m) <- c(2,2)
m
dimnames(m) <- c("coke", "Pepsi")
dimnames(m) <- lisT(rownames = c("coke", "Pepsi"), colnames=c("pref", "Nonpref")
)
dimnames(m) <- list(rownames = c("coke", "Pepsi"), colnames=c("pref", "Nonpref"))
m
fisher.test(m)
fisher.test(x=m, alternative = "greater")
fisher.test(x=m, alternative = "less")
fisher.test(x=m, alternative = "less", simulate.p.value = TRUE, B = 1e5)
fisher.test(x=m, alternative = "greater", simulate.p.value = TRUE, B = 1e5)
rexp(n, lambda)
rexp(n=40, lambda=2)
x<-rexp(n=40, lambda=0.2)
?rexp
x<-rexp(n=40, rate=0.2)
x
hist(x)
?simulate
?runif
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
library(MASS)
data(shuttle)
data(shuttle)
head(shuttle)
str(shuttle)
s1 <- glm(shuttle$use ~ shuttle$wind,family="binomial")
summary(s1)
exp(s1$coeff
)
?relevel
relevel(shuttle$wind, ref = "tail")
s2 <- glm(shuttle$use ~ shuttle$wind,family="binomial")
exp(s2$coeff)
relevel(shuttle$wind, ref = "head")
s2 <- glm(shuttle$use ~ shuttle$wind+shuttle$magn,family="binomial")
exp(s2$coeff)
data(InsectSprays)
head(InsectSprays)
glm1 <- glm(InsectSprays$count ~ InsectSprays$spray,family="poisson")
summary(glm1)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat)
)
summary(yhat)
yhat <- lm(y ~ xMat)
summary(yhat)
plot(x,y)
lines(x,yhat)
yhat
lines(x,predict(yhat))
str(InsectSprays)
relevel(InsectSprays$spray, ref= 'B')
glm1 <- glm(InsectSprays$count ~ InsectSprays$spray,family="poisson")
summary(glm1)
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <-
| lm(child ~ parent, galton)
regrline <- | lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child~parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals,
| galton$parent)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
library(AppliedPredictiveModeling)
package(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
?createDataPartition
install.packages("caret")
?createDataPartition
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
head(AlzheimerDisease)
adData = data.frame(predictors)
head(adData)
adData = data.frame(diagnosis,predictors)
head(adData)
data(concrete)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(SuperPlasticizer + 1))
hist(log(training$SuperPlasticizer + 1))
hist(log(training$SuperPlasticizer) + 1)
hist(log10(training$SuperPlasticizer + 1))
?hist
hist(log10(training$SuperPlasticizer + 1), breaks = 100)
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(log10(training$Superplasticizer)+1)
hist(log10(training$Superplasticizer+1))
x <- training$Superplasticizer==0
length(x)
hist(log10(training$Superplasticizer+1))
hist(training$Superplasticizer)
x
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
head(training[,58:69])
preProc <- preProcess(log10(training[,58:69]+1), method="pca")
preProc <- preProcess(training[,58:69], method="pca")
preProc
?preProcess
preProc <- preProcess(training[,58:69], method="pca", thresh=0.8)
preProc
preProc <- preProcess(training[,58:69], method="pca", thresh=0.8)
tr1 <- datframe(training$diagnosis, training[,58:69])
tr1 <- dataframe(training$diagnosis, training[,58:69])
tr1 <- data.frame(training$diagnosis, training[,58:69])
model1 <- train(diagnosis~., method = "glm", preProcess="pca", data=tr1)
model1 <- train(tr1$diagnosis~., method = "glm", preProcess="pca", data=tr1)
model1 <- train(tr1$diagnosis ~ ., method = "glm", preProcess="pca", data=tr1)
tr1$diagnosis
model1 <- train(training.diagnosis ~ ., method = "glm", preProcess="pca", data=tr1)
model1 <- train(training$diagnosis ~ ., method = "glm", preProcess="pca", data=tr1)
model1 <- train(training$diagnosis ~ ., method = "glm", preProcess="pca", data=tr1)
set.seed(3433)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
model1 <- train(diagnosis ~ training[,58:69], method="glm", data = training)
x <- data.frame(dignosis, training[,58:69])
x <- data.frame(diagnosis, training[,58:69])
x <- data.frame(training$diagnosis, training[,58:69])
model1 <- train(diagnosis ~ ., method="glm", data = x)
model1 <- train(training.diagnosis ~ ., method="glm", data = x)
install.packages("e1071")
model1 <- train(training.diagnosis ~ ., method="glm", data = x)
model1
preProc <- preProcess(x[,-1], method="pca")
diaPC <- predict(preProc,x[,-1])
model2 <- train(training.diagnosis ~ ., method="glm", data=x)
model2
preProc <- preProcess(x[,-1], method="pca")
diaPC <- predict(preProc,x[,-1])
model2 <- train(training.diagnosis ~ ., method="glm", data=diaPC)
diaPC
preProc <- preProcess(x[,-1], method="pca")
diaPC <- predict(preProc,x[,-1])
model2 <- train(x$training.diagnosis ~ ., method="glm", data=diaPC)
model2
preProc
preProc <- preProcess(x[,-1], method="pca", thresh = 0.8)
diaPC <- predict(preProc,x[,-1])
model2 <- train(x$training.diagnosis ~ ., method="glm", data=diaPC)
model2
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
training <- SegmentationOriginal[SegmentationOriginal$Case=='Train']
testing <-  SegmentationOriginal[SegmentationOriginal$Case=='Test']
training <- segmentationOriginal[segmentationOriginal$Case=='Train']
testing <-  segmentationOriginal[segmentationOriginal$Case=='Test']
training <- segmentationOriginal[,segmentationOriginal$Case=='Train']
testing <-  segmentationOriginal[,segmentationOriginal$Case=='Test']
training <- segmentationOriginal[,segmentationOriginal$Case='Train']
testing <-  segmentationOriginal[,segmentationOriginal$Case='Test']
training <- segmentationOriginal[,segmentationOriginal$Case=="Train"]
testing <-  segmentationOriginal[,segmentationOriginal$Case=="Test"]
training <- segmentationOriginal[segmentationOriginal$Case=="Train", ]
testing <-  segmentationOriginal[segmentationOriginal$Case=="Test", ]
?segmentationOriginal
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training)
?predict
predict(modFit,newdata=testing)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
?tree
??tree
str(olive)
olive$Area
modFit1 <- train(Area ~ .,method="rpart",data=training)
modFit1 <- train(Area ~ .,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modfit1,newdata)
predict(modFit1,newdata)
plot(modFit1$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit1$finalModel, use.n=TRUE, all=TRUE, cex=.8)
print(modFit1$finalModel)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(SAheart)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predtrain <- predict(modFit,trainSA)
predtest <- predict(modFit,testSA)
m1 <- missClass(trainSA$chd,predtrain)
m2 <- missClass(testSA$chd,predtest)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
?varImp
varImp(modFit)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("tree")
?tree
?predict.tree
??tree
modFit1 <- train(Area ~ .,method="rpart",data=olive)
modFit1 <- train(Area ~ .,method="tree",data=olive)
modFit1 <- train(Area ~ .,method="rpart",data=olive)
predict(modFit1, newdata = as.data.frame(t(colMeans(olive))))
?olive
library(cars)
library(manipulate)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
myplot
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
setwd("C:/motley/DS/DataProducts/ShinyApp-WagesData")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp(display.mode = 'showcase')
library(ISLR)
library(caret)
library(ggplot2)
data(Wage)
Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?stringasFactors
?stringsasFactors
?stringsAsFactors
shiny::runApp()
shiny::runApp()
runApp(display.mode = 'showcase')
shiny::runApp()
library(ISLR)
library(caret)
library(ggplot2)
data(Wage)
Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?levels
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(ISLR)
library(caret)
library(ggplot2)
data(Wage)
Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
print(levels(Wage$jobclass))
print(levels(Wage$education))
library(ISLR)
library(caret)
library(ggplot2)
data(Wage)
Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
print(levels(Wage$jobclass))
print(levels(Wage$education))
print(levels(Wage$health_ins))
print(levels(Wage$sex))
?as.integer
library(ISLR)
library(caret)
library(ggplot2)
data(Wage)
Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
print(levels(Wage$jobclass))
print(levels(Wage$region))
print(levels(Wage$health))
print(levels(Wage$maritl))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("devtools")
?wage
?Wage
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("devtools")
